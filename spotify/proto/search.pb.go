// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchRequest_Type int32

const (
	SearchRequest_TRACK    SearchRequest_Type = 0
	SearchRequest_ALBUM    SearchRequest_Type = 1
	SearchRequest_ARTIST   SearchRequest_Type = 2
	SearchRequest_PLAYLIST SearchRequest_Type = 3
	SearchRequest_USER     SearchRequest_Type = 4
)

var SearchRequest_Type_name = map[int32]string{
	0: "TRACK",
	1: "ALBUM",
	2: "ARTIST",
	3: "PLAYLIST",
	4: "USER",
}

var SearchRequest_Type_value = map[string]int32{
	"TRACK":    0,
	"ALBUM":    1,
	"ARTIST":   2,
	"PLAYLIST": 3,
	"USER":     4,
}

func (x SearchRequest_Type) Enum() *SearchRequest_Type {
	p := new(SearchRequest_Type)
	*p = x
	return p
}

func (x SearchRequest_Type) String() string {
	return proto.EnumName(SearchRequest_Type_name, int32(x))
}

func (x *SearchRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SearchRequest_Type_value, data, "SearchRequest_Type")
	if err != nil {
		return err
	}
	*x = SearchRequest_Type(value)
	return nil
}

func (SearchRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0, 0}
}

type SearchRequest struct {
	Query                *string             `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Type                 *SearchRequest_Type `protobuf:"varint,2,opt,name=type,enum=proto.SearchRequest_Type" json:"type,omitempty"`
	Limit                *int32              `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset               *int32              `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	DidYouMean           *bool               `protobuf:"varint,5,opt,name=did_you_mean,json=didYouMean" json:"did_you_mean,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *SearchRequest) GetType() SearchRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SearchRequest_TRACK
}

func (m *SearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *SearchRequest) GetDidYouMean() bool {
	if m != nil && m.DidYouMean != nil {
		return *m.DidYouMean
	}
	return false
}

type Playlist struct {
	Uri                  *string  `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image                []*Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Playlist) Reset()         { *m = Playlist{} }
func (m *Playlist) String() string { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()    {}
func (*Playlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

func (m *Playlist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Playlist.Unmarshal(m, b)
}
func (m *Playlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Playlist.Marshal(b, m, deterministic)
}
func (m *Playlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Playlist.Merge(m, src)
}
func (m *Playlist) XXX_Size() int {
	return xxx_messageInfo_Playlist.Size(m)
}
func (m *Playlist) XXX_DiscardUnknown() {
	xxx_messageInfo_Playlist.DiscardUnknown(m)
}

var xxx_messageInfo_Playlist proto.InternalMessageInfo

func (m *Playlist) GetUri() string {
	if m != nil && m.Uri != nil {
		return *m.Uri
	}
	return ""
}

func (m *Playlist) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Playlist) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type User struct {
	Username             *string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	FullName             *string  `protobuf:"bytes,2,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Image                []*Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	Followers            *int32   `protobuf:"zigzag32,4,opt,name=followers" json:"followers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *User) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *User) GetFollowers() int32 {
	if m != nil && m.Followers != nil {
		return *m.Followers
	}
	return 0
}

type SearchReply struct {
	Hits                 *int32      `protobuf:"zigzag32,1,opt,name=hits" json:"hits,omitempty"`
	Track                []*Track    `protobuf:"bytes,2,rep,name=track" json:"track,omitempty"`
	Album                []*Album    `protobuf:"bytes,3,rep,name=album" json:"album,omitempty"`
	Artist               []*Artist   `protobuf:"bytes,4,rep,name=artist" json:"artist,omitempty"`
	Playlist             []*Playlist `protobuf:"bytes,5,rep,name=playlist" json:"playlist,omitempty"`
	DidYouMean           *string     `protobuf:"bytes,6,opt,name=did_you_mean,json=didYouMean" json:"did_you_mean,omitempty"`
	User                 []*User     `protobuf:"bytes,7,rep,name=user" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SearchReply) Reset()         { *m = SearchReply{} }
func (m *SearchReply) String() string { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()    {}
func (*SearchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{3}
}

func (m *SearchReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchReply.Unmarshal(m, b)
}
func (m *SearchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchReply.Marshal(b, m, deterministic)
}
func (m *SearchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchReply.Merge(m, src)
}
func (m *SearchReply) XXX_Size() int {
	return xxx_messageInfo_SearchReply.Size(m)
}
func (m *SearchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchReply proto.InternalMessageInfo

func (m *SearchReply) GetHits() int32 {
	if m != nil && m.Hits != nil {
		return *m.Hits
	}
	return 0
}

func (m *SearchReply) GetTrack() []*Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *SearchReply) GetAlbum() []*Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *SearchReply) GetArtist() []*Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *SearchReply) GetPlaylist() []*Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

func (m *SearchReply) GetDidYouMean() string {
	if m != nil && m.DidYouMean != nil {
		return *m.DidYouMean
	}
	return ""
}

func (m *SearchReply) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.SearchRequest_Type", SearchRequest_Type_name, SearchRequest_Type_value)
	proto.RegisterType((*SearchRequest)(nil), "proto.SearchRequest")
	proto.RegisterType((*Playlist)(nil), "proto.Playlist")
	proto.RegisterType((*User)(nil), "proto.User")
	proto.RegisterType((*SearchReply)(nil), "proto.SearchReply")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x89, 0x1d, 0xec, 0x49, 0x5a, 0xdc, 0x11, 0x42, 0x4b, 0x41, 0xc2, 0xb2, 0x84, 0x64,
	0x09, 0x91, 0x43, 0xbf, 0x00, 0x83, 0x38, 0x54, 0xa4, 0xa8, 0xda, 0x38, 0x87, 0x9e, 0xa2, 0xa5,
	0xde, 0xd0, 0x15, 0xeb, 0xd8, 0xdd, 0x5d, 0x0b, 0xf9, 0x06, 0x3f, 0xcb, 0x77, 0xa0, 0xdd, 0x75,
	0x4a, 0x0b, 0x17, 0x4e, 0x9e, 0x79, 0xf3, 0xfc, 0x66, 0xe7, 0x3d, 0x58, 0x68, 0xce, 0xd4, 0xf5,
	0xcd, 0xb2, 0x53, 0xad, 0x69, 0x31, 0x72, 0x9f, 0xd3, 0xe3, 0x86, 0x1b, 0x56, 0x33, 0xc3, 0x3c,
	0x9c, 0xff, 0x0a, 0xe0, 0x68, 0xed, 0x78, 0x94, 0xdf, 0xf6, 0x5c, 0x1b, 0x7c, 0x0a, 0xd1, 0x6d,
	0xcf, 0xd5, 0x40, 0x82, 0x2c, 0x28, 0x12, 0xea, 0x1b, 0x7c, 0x0b, 0xa1, 0x19, 0x3a, 0x4e, 0x26,
	0x59, 0x50, 0x1c, 0x9f, 0x3d, 0xf7, 0x7f, 0x2f, 0x1f, 0xfc, 0xb9, 0xac, 0x86, 0x8e, 0x53, 0x47,
	0xb3, 0x22, 0x52, 0x34, 0xc2, 0x90, 0x69, 0x16, 0x14, 0x11, 0xf5, 0x0d, 0x3e, 0x83, 0x59, 0xbb,
	0xdb, 0x69, 0x6e, 0x48, 0xe8, 0xe0, 0xb1, 0xc3, 0x0c, 0x16, 0xb5, 0xa8, 0xb7, 0x43, 0xdb, 0x6f,
	0x1b, 0xce, 0xf6, 0x24, 0xca, 0x82, 0x22, 0xa6, 0x50, 0x8b, 0xfa, 0xaa, 0xed, 0x2f, 0x38, 0xdb,
	0xe7, 0xef, 0x20, 0xb4, 0xea, 0x98, 0x40, 0x54, 0xd1, 0xf2, 0xc3, 0xa7, 0xf4, 0x91, 0x2d, 0xcb,
	0xd5, 0xfb, 0xcd, 0x45, 0x1a, 0x20, 0xc0, 0xac, 0xa4, 0xd5, 0xf9, 0xba, 0x4a, 0x27, 0xb8, 0x80,
	0xf8, 0x72, 0x55, 0x5e, 0xad, 0x6c, 0x37, 0xc5, 0x18, 0xc2, 0xcd, 0xfa, 0x23, 0x4d, 0xc3, 0xbc,
	0x82, 0xf8, 0x52, 0xb2, 0x41, 0x0a, 0x6d, 0x30, 0x85, 0x69, 0xaf, 0xc4, 0x78, 0xa0, 0x2d, 0x11,
	0x21, 0xdc, 0xb3, 0xc6, 0x9f, 0x97, 0x50, 0x57, 0x63, 0x0e, 0x91, 0x68, 0xd8, 0x57, 0x4e, 0xa6,
	0xd9, 0xb4, 0x98, 0x9f, 0x2d, 0xc6, 0x9b, 0xcf, 0x2d, 0x46, 0xfd, 0x28, 0xff, 0x19, 0x40, 0xb8,
	0xd1, 0x5c, 0xe1, 0x29, 0xc4, 0xbd, 0xe6, 0xca, 0x89, 0x78, 0xdd, 0xbb, 0x1e, 0x5f, 0x40, 0xb2,
	0xeb, 0xa5, 0xdc, 0xde, 0xdb, 0x10, 0x5b, 0xe0, 0xf3, 0x7f, 0x6e, 0xc1, 0x97, 0x90, 0xec, 0x5a,
	0x29, 0xdb, 0xef, 0x5c, 0x69, 0x67, 0xdd, 0x09, 0xfd, 0x03, 0xe4, 0x3f, 0x26, 0x30, 0x3f, 0x04,
	0xd1, 0xc9, 0xc1, 0xde, 0x72, 0x23, 0x8c, 0x76, 0xcf, 0x38, 0xa1, 0xae, 0xb6, 0x5b, 0x8c, 0x62,
	0xd7, 0xdf, 0xc8, 0xe4, 0xc1, 0x96, 0xca, 0x62, 0xd4, 0x8f, 0x2c, 0x87, 0xc9, 0x2f, 0x7d, 0xf3,
	0xd7, 0x4b, 0x4a, 0x8b, 0x51, 0x3f, 0xc2, 0xd7, 0x30, 0x63, 0xca, 0x08, 0x6d, 0x13, 0xb4, 0xa4,
	0xa3, 0x03, 0xc9, 0x81, 0x74, 0x1c, 0xe2, 0x1b, 0x88, 0xbb, 0xd1, 0x6c, 0x12, 0x39, 0xe2, 0x93,
	0x91, 0x78, 0xc8, 0x80, 0xde, 0x11, 0xfe, 0x49, 0x7f, 0xe6, 0x1c, 0xba, 0x97, 0x3e, 0xbe, 0x82,
	0xd0, 0x9a, 0x49, 0x1e, 0x3b, 0xa9, 0xf9, 0x28, 0x65, 0x7d, 0xa7, 0x6e, 0xf0, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0x43, 0x6e, 0x7f, 0xeb, 0x02, 0x00, 0x00,
}
