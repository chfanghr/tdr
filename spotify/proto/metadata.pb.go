// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metadata.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Album_Type int32

const (
	Album_ALBUM       Album_Type = 1
	Album_SINGLE      Album_Type = 2
	Album_COMPILATION Album_Type = 3
	Album_EP          Album_Type = 4
)

var Album_Type_name = map[int32]string{
	1: "ALBUM",
	2: "SINGLE",
	3: "COMPILATION",
	4: "EP",
}

var Album_Type_value = map[string]int32{
	"ALBUM":       1,
	"SINGLE":      2,
	"COMPILATION": 3,
	"EP":          4,
}

func (x Album_Type) Enum() *Album_Type {
	p := new(Album_Type)
	*p = x
	return p
}

func (x Album_Type) String() string {
	return proto.EnumName(Album_Type_name, int32(x))
}

func (x *Album_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Album_Type_value, data, "Album_Type")
	if err != nil {
		return err
	}
	*x = Album_Type(value)
	return nil
}

func (Album_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{5, 0}
}

type Image_Size int32

const (
	Image_DEFAULT Image_Size = 0
	Image_SMALL   Image_Size = 1
	Image_LARGE   Image_Size = 2
	Image_XLARGE  Image_Size = 3
)

var Image_Size_name = map[int32]string{
	0: "DEFAULT",
	1: "SMALL",
	2: "LARGE",
	3: "XLARGE",
}

var Image_Size_value = map[string]int32{
	"DEFAULT": 0,
	"SMALL":   1,
	"LARGE":   2,
	"XLARGE":  3,
}

func (x Image_Size) Enum() *Image_Size {
	p := new(Image_Size)
	*p = x
	return p
}

func (x Image_Size) String() string {
	return proto.EnumName(Image_Size_name, int32(x))
}

func (x *Image_Size) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Image_Size_value, data, "Image_Size")
	if err != nil {
		return err
	}
	*x = Image_Size(value)
	return nil
}

func (Image_Size) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{7, 0}
}

type Copyright_Type int32

const (
	Copyright_P Copyright_Type = 0
	Copyright_C Copyright_Type = 1
)

var Copyright_Type_name = map[int32]string{
	0: "P",
	1: "C",
}

var Copyright_Type_value = map[string]int32{
	"P": 0,
	"C": 1,
}

func (x Copyright_Type) Enum() *Copyright_Type {
	p := new(Copyright_Type)
	*p = x
	return p
}

func (x Copyright_Type) String() string {
	return proto.EnumName(Copyright_Type_name, int32(x))
}

func (x *Copyright_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Copyright_Type_value, data, "Copyright_Type")
	if err != nil {
		return err
	}
	*x = Copyright_Type(value)
	return nil
}

func (Copyright_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{11, 0}
}

type Restriction_Type int32

const (
	Restriction_STREAMING Restriction_Type = 0
)

var Restriction_Type_name = map[int32]string{
	0: "STREAMING",
}

var Restriction_Type_value = map[string]int32{
	"STREAMING": 0,
}

func (x Restriction_Type) Enum() *Restriction_Type {
	p := new(Restriction_Type)
	*p = x
	return p
}

func (x Restriction_Type) String() string {
	return proto.EnumName(Restriction_Type_name, int32(x))
}

func (x *Restriction_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Restriction_Type_value, data, "Restriction_Type")
	if err != nil {
		return err
	}
	*x = Restriction_Type(value)
	return nil
}

func (Restriction_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{12, 0}
}

type AudioFile_Format int32

const (
	AudioFile_OGG_VORBIS_96  AudioFile_Format = 0
	AudioFile_OGG_VORBIS_160 AudioFile_Format = 1
	AudioFile_OGG_VORBIS_320 AudioFile_Format = 2
	AudioFile_MP3_256        AudioFile_Format = 3
	AudioFile_MP3_320        AudioFile_Format = 4
	AudioFile_MP3_160        AudioFile_Format = 5
	AudioFile_MP3_96         AudioFile_Format = 6
	AudioFile_MP3_160_ENC    AudioFile_Format = 7
	AudioFile_OTHER2         AudioFile_Format = 8
	AudioFile_OTHER3         AudioFile_Format = 9
	AudioFile_AAC_160        AudioFile_Format = 10
	AudioFile_AAC_320        AudioFile_Format = 11
	AudioFile_OTHER4         AudioFile_Format = 12
	AudioFile_OTHER5         AudioFile_Format = 13
)

var AudioFile_Format_name = map[int32]string{
	0:  "OGG_VORBIS_96",
	1:  "OGG_VORBIS_160",
	2:  "OGG_VORBIS_320",
	3:  "MP3_256",
	4:  "MP3_320",
	5:  "MP3_160",
	6:  "MP3_96",
	7:  "MP3_160_ENC",
	8:  "OTHER2",
	9:  "OTHER3",
	10: "AAC_160",
	11: "AAC_320",
	12: "OTHER4",
	13: "OTHER5",
}

var AudioFile_Format_value = map[string]int32{
	"OGG_VORBIS_96":  0,
	"OGG_VORBIS_160": 1,
	"OGG_VORBIS_320": 2,
	"MP3_256":        3,
	"MP3_320":        4,
	"MP3_160":        5,
	"MP3_96":         6,
	"MP3_160_ENC":    7,
	"OTHER2":         8,
	"OTHER3":         9,
	"AAC_160":        10,
	"AAC_320":        11,
	"OTHER4":         12,
	"OTHER5":         13,
}

func (x AudioFile_Format) Enum() *AudioFile_Format {
	p := new(AudioFile_Format)
	*p = x
	return p
}

func (x AudioFile_Format) String() string {
	return proto.EnumName(AudioFile_Format_name, int32(x))
}

func (x *AudioFile_Format) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AudioFile_Format_value, data, "AudioFile_Format")
	if err != nil {
		return err
	}
	*x = AudioFile_Format(value)
	return nil
}

func (AudioFile_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{15, 0}
}

type TopTracks struct {
	Country              *string  `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Track                []*Track `protobuf:"bytes,2,rep,name=track" json:"track,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopTracks) Reset()         { *m = TopTracks{} }
func (m *TopTracks) String() string { return proto.CompactTextString(m) }
func (*TopTracks) ProtoMessage()    {}
func (*TopTracks) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{0}
}

func (m *TopTracks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopTracks.Unmarshal(m, b)
}
func (m *TopTracks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopTracks.Marshal(b, m, deterministic)
}
func (m *TopTracks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopTracks.Merge(m, src)
}
func (m *TopTracks) XXX_Size() int {
	return xxx_messageInfo_TopTracks.Size(m)
}
func (m *TopTracks) XXX_DiscardUnknown() {
	xxx_messageInfo_TopTracks.DiscardUnknown(m)
}

var xxx_messageInfo_TopTracks proto.InternalMessageInfo

func (m *TopTracks) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *TopTracks) GetTrack() []*Track {
	if m != nil {
		return m.Track
	}
	return nil
}

type ActivityPeriod struct {
	StartYear            *int32   `protobuf:"zigzag32,1,opt,name=start_year,json=startYear" json:"start_year,omitempty"`
	EndYear              *int32   `protobuf:"zigzag32,2,opt,name=end_year,json=endYear" json:"end_year,omitempty"`
	Decade               *int32   `protobuf:"zigzag32,3,opt,name=decade" json:"decade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityPeriod) Reset()         { *m = ActivityPeriod{} }
func (m *ActivityPeriod) String() string { return proto.CompactTextString(m) }
func (*ActivityPeriod) ProtoMessage()    {}
func (*ActivityPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{1}
}

func (m *ActivityPeriod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivityPeriod.Unmarshal(m, b)
}
func (m *ActivityPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivityPeriod.Marshal(b, m, deterministic)
}
func (m *ActivityPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityPeriod.Merge(m, src)
}
func (m *ActivityPeriod) XXX_Size() int {
	return xxx_messageInfo_ActivityPeriod.Size(m)
}
func (m *ActivityPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityPeriod proto.InternalMessageInfo

func (m *ActivityPeriod) GetStartYear() int32 {
	if m != nil && m.StartYear != nil {
		return *m.StartYear
	}
	return 0
}

func (m *ActivityPeriod) GetEndYear() int32 {
	if m != nil && m.EndYear != nil {
		return *m.EndYear
	}
	return 0
}

func (m *ActivityPeriod) GetDecade() int32 {
	if m != nil && m.Decade != nil {
		return *m.Decade
	}
	return 0
}

type Artist struct {
	Gid                  []byte            `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Name                 *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Popularity           *int32            `protobuf:"zigzag32,3,opt,name=popularity" json:"popularity,omitempty"`
	TopTrack             []*TopTracks      `protobuf:"bytes,4,rep,name=top_track,json=topTrack" json:"top_track,omitempty"`
	AlbumGroup           []*AlbumGroup     `protobuf:"bytes,5,rep,name=album_group,json=albumGroup" json:"album_group,omitempty"`
	SingleGroup          []*AlbumGroup     `protobuf:"bytes,6,rep,name=single_group,json=singleGroup" json:"single_group,omitempty"`
	CompilationGroup     []*AlbumGroup     `protobuf:"bytes,7,rep,name=compilation_group,json=compilationGroup" json:"compilation_group,omitempty"`
	AppearsOnGroup       []*AlbumGroup     `protobuf:"bytes,8,rep,name=appears_on_group,json=appearsOnGroup" json:"appears_on_group,omitempty"`
	Genre                []string          `protobuf:"bytes,9,rep,name=genre" json:"genre,omitempty"`
	ExternalId           []*ExternalId     `protobuf:"bytes,10,rep,name=external_id,json=externalId" json:"external_id,omitempty"`
	Portrait             []*Image          `protobuf:"bytes,11,rep,name=portrait" json:"portrait,omitempty"`
	Biography            []*Biography      `protobuf:"bytes,12,rep,name=biography" json:"biography,omitempty"`
	ActivityPeriod       []*ActivityPeriod `protobuf:"bytes,13,rep,name=activity_period,json=activityPeriod" json:"activity_period,omitempty"`
	Restriction          []*Restriction    `protobuf:"bytes,14,rep,name=restriction" json:"restriction,omitempty"`
	Related              []*Artist         `protobuf:"bytes,15,rep,name=related" json:"related,omitempty"`
	IsPortraitAlbumCover *bool             `protobuf:"varint,16,opt,name=is_portrait_album_cover,json=isPortraitAlbumCover" json:"is_portrait_album_cover,omitempty"`
	PortraitGroup        *ImageGroup       `protobuf:"bytes,17,opt,name=portrait_group,json=portraitGroup" json:"portrait_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Artist) Reset()         { *m = Artist{} }
func (m *Artist) String() string { return proto.CompactTextString(m) }
func (*Artist) ProtoMessage()    {}
func (*Artist) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{2}
}

func (m *Artist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artist.Unmarshal(m, b)
}
func (m *Artist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artist.Marshal(b, m, deterministic)
}
func (m *Artist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artist.Merge(m, src)
}
func (m *Artist) XXX_Size() int {
	return xxx_messageInfo_Artist.Size(m)
}
func (m *Artist) XXX_DiscardUnknown() {
	xxx_messageInfo_Artist.DiscardUnknown(m)
}

var xxx_messageInfo_Artist proto.InternalMessageInfo

func (m *Artist) GetGid() []byte {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *Artist) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Artist) GetPopularity() int32 {
	if m != nil && m.Popularity != nil {
		return *m.Popularity
	}
	return 0
}

func (m *Artist) GetTopTrack() []*TopTracks {
	if m != nil {
		return m.TopTrack
	}
	return nil
}

func (m *Artist) GetAlbumGroup() []*AlbumGroup {
	if m != nil {
		return m.AlbumGroup
	}
	return nil
}

func (m *Artist) GetSingleGroup() []*AlbumGroup {
	if m != nil {
		return m.SingleGroup
	}
	return nil
}

func (m *Artist) GetCompilationGroup() []*AlbumGroup {
	if m != nil {
		return m.CompilationGroup
	}
	return nil
}

func (m *Artist) GetAppearsOnGroup() []*AlbumGroup {
	if m != nil {
		return m.AppearsOnGroup
	}
	return nil
}

func (m *Artist) GetGenre() []string {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *Artist) GetExternalId() []*ExternalId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

func (m *Artist) GetPortrait() []*Image {
	if m != nil {
		return m.Portrait
	}
	return nil
}

func (m *Artist) GetBiography() []*Biography {
	if m != nil {
		return m.Biography
	}
	return nil
}

func (m *Artist) GetActivityPeriod() []*ActivityPeriod {
	if m != nil {
		return m.ActivityPeriod
	}
	return nil
}

func (m *Artist) GetRestriction() []*Restriction {
	if m != nil {
		return m.Restriction
	}
	return nil
}

func (m *Artist) GetRelated() []*Artist {
	if m != nil {
		return m.Related
	}
	return nil
}

func (m *Artist) GetIsPortraitAlbumCover() bool {
	if m != nil && m.IsPortraitAlbumCover != nil {
		return *m.IsPortraitAlbumCover
	}
	return false
}

func (m *Artist) GetPortraitGroup() *ImageGroup {
	if m != nil {
		return m.PortraitGroup
	}
	return nil
}

type AlbumGroup struct {
	Album                []*Album `protobuf:"bytes,1,rep,name=album" json:"album,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlbumGroup) Reset()         { *m = AlbumGroup{} }
func (m *AlbumGroup) String() string { return proto.CompactTextString(m) }
func (*AlbumGroup) ProtoMessage()    {}
func (*AlbumGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{3}
}

func (m *AlbumGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlbumGroup.Unmarshal(m, b)
}
func (m *AlbumGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlbumGroup.Marshal(b, m, deterministic)
}
func (m *AlbumGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlbumGroup.Merge(m, src)
}
func (m *AlbumGroup) XXX_Size() int {
	return xxx_messageInfo_AlbumGroup.Size(m)
}
func (m *AlbumGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_AlbumGroup.DiscardUnknown(m)
}

var xxx_messageInfo_AlbumGroup proto.InternalMessageInfo

func (m *AlbumGroup) GetAlbum() []*Album {
	if m != nil {
		return m.Album
	}
	return nil
}

type Date struct {
	Year                 *int32   `protobuf:"zigzag32,1,opt,name=year" json:"year,omitempty"`
	Month                *int32   `protobuf:"zigzag32,2,opt,name=month" json:"month,omitempty"`
	Day                  *int32   `protobuf:"zigzag32,3,opt,name=day" json:"day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{4}
}

func (m *Date) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Date.Unmarshal(m, b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Date.Marshal(b, m, deterministic)
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return xxx_messageInfo_Date.Size(m)
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

type Album struct {
	Gid                  []byte         `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Name                 *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Artist               []*Artist      `protobuf:"bytes,3,rep,name=artist" json:"artist,omitempty"`
	Typ                  *Album_Type    `protobuf:"varint,4,opt,name=typ,enum=proto.Album_Type" json:"typ,omitempty"`
	Label                *string        `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	Date                 *Date          `protobuf:"bytes,6,opt,name=date" json:"date,omitempty"`
	Popularity           *int32         `protobuf:"zigzag32,7,opt,name=popularity" json:"popularity,omitempty"`
	Genre                []string       `protobuf:"bytes,8,rep,name=genre" json:"genre,omitempty"`
	Cover                []*Image       `protobuf:"bytes,9,rep,name=cover" json:"cover,omitempty"`
	ExternalId           []*ExternalId  `protobuf:"bytes,10,rep,name=external_id,json=externalId" json:"external_id,omitempty"`
	Disc                 []*Disc        `protobuf:"bytes,11,rep,name=disc" json:"disc,omitempty"`
	Review               []string       `protobuf:"bytes,12,rep,name=review" json:"review,omitempty"`
	Copyright            []*Copyright   `protobuf:"bytes,13,rep,name=copyright" json:"copyright,omitempty"`
	Restriction          []*Restriction `protobuf:"bytes,14,rep,name=restriction" json:"restriction,omitempty"`
	Related              []*Album       `protobuf:"bytes,15,rep,name=related" json:"related,omitempty"`
	SalePeriod           []*SalePeriod  `protobuf:"bytes,16,rep,name=sale_period,json=salePeriod" json:"sale_period,omitempty"`
	CoverGroup           *ImageGroup    `protobuf:"bytes,17,opt,name=cover_group,json=coverGroup" json:"cover_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Album) Reset()         { *m = Album{} }
func (m *Album) String() string { return proto.CompactTextString(m) }
func (*Album) ProtoMessage()    {}
func (*Album) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{5}
}

func (m *Album) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Album.Unmarshal(m, b)
}
func (m *Album) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Album.Marshal(b, m, deterministic)
}
func (m *Album) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Album.Merge(m, src)
}
func (m *Album) XXX_Size() int {
	return xxx_messageInfo_Album.Size(m)
}
func (m *Album) XXX_DiscardUnknown() {
	xxx_messageInfo_Album.DiscardUnknown(m)
}

var xxx_messageInfo_Album proto.InternalMessageInfo

func (m *Album) GetGid() []byte {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *Album) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Album) GetArtist() []*Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *Album) GetTyp() Album_Type {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return Album_ALBUM
}

func (m *Album) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Album) GetDate() *Date {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Album) GetPopularity() int32 {
	if m != nil && m.Popularity != nil {
		return *m.Popularity
	}
	return 0
}

func (m *Album) GetGenre() []string {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *Album) GetCover() []*Image {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *Album) GetExternalId() []*ExternalId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

func (m *Album) GetDisc() []*Disc {
	if m != nil {
		return m.Disc
	}
	return nil
}

func (m *Album) GetReview() []string {
	if m != nil {
		return m.Review
	}
	return nil
}

func (m *Album) GetCopyright() []*Copyright {
	if m != nil {
		return m.Copyright
	}
	return nil
}

func (m *Album) GetRestriction() []*Restriction {
	if m != nil {
		return m.Restriction
	}
	return nil
}

func (m *Album) GetRelated() []*Album {
	if m != nil {
		return m.Related
	}
	return nil
}

func (m *Album) GetSalePeriod() []*SalePeriod {
	if m != nil {
		return m.SalePeriod
	}
	return nil
}

func (m *Album) GetCoverGroup() *ImageGroup {
	if m != nil {
		return m.CoverGroup
	}
	return nil
}

type Track struct {
	Gid                  []byte         `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Name                 *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Album                *Album         `protobuf:"bytes,3,opt,name=album" json:"album,omitempty"`
	Artist               []*Artist      `protobuf:"bytes,4,rep,name=artist" json:"artist,omitempty"`
	Number               *int32         `protobuf:"zigzag32,5,opt,name=number" json:"number,omitempty"`
	DiscNumber           *int32         `protobuf:"zigzag32,6,opt,name=disc_number,json=discNumber" json:"disc_number,omitempty"`
	Duration             *int32         `protobuf:"zigzag32,7,opt,name=duration" json:"duration,omitempty"`
	Popularity           *int32         `protobuf:"zigzag32,8,opt,name=popularity" json:"popularity,omitempty"`
	Explicit             *bool          `protobuf:"varint,9,opt,name=explicit" json:"explicit,omitempty"`
	ExternalId           []*ExternalId  `protobuf:"bytes,10,rep,name=external_id,json=externalId" json:"external_id,omitempty"`
	Restriction          []*Restriction `protobuf:"bytes,11,rep,name=restriction" json:"restriction,omitempty"`
	File                 []*AudioFile   `protobuf:"bytes,12,rep,name=file" json:"file,omitempty"`
	Alternative          []*Track       `protobuf:"bytes,13,rep,name=alternative" json:"alternative,omitempty"`
	SalePeriod           []*SalePeriod  `protobuf:"bytes,14,rep,name=sale_period,json=salePeriod" json:"sale_period,omitempty"`
	Preview              []*AudioFile   `protobuf:"bytes,15,rep,name=preview" json:"preview,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{6}
}

func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetGid() []byte {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *Track) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Track) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *Track) GetArtist() []*Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *Track) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Track) GetDiscNumber() int32 {
	if m != nil && m.DiscNumber != nil {
		return *m.DiscNumber
	}
	return 0
}

func (m *Track) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Track) GetPopularity() int32 {
	if m != nil && m.Popularity != nil {
		return *m.Popularity
	}
	return 0
}

func (m *Track) GetExplicit() bool {
	if m != nil && m.Explicit != nil {
		return *m.Explicit
	}
	return false
}

func (m *Track) GetExternalId() []*ExternalId {
	if m != nil {
		return m.ExternalId
	}
	return nil
}

func (m *Track) GetRestriction() []*Restriction {
	if m != nil {
		return m.Restriction
	}
	return nil
}

func (m *Track) GetFile() []*AudioFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Track) GetAlternative() []*Track {
	if m != nil {
		return m.Alternative
	}
	return nil
}

func (m *Track) GetSalePeriod() []*SalePeriod {
	if m != nil {
		return m.SalePeriod
	}
	return nil
}

func (m *Track) GetPreview() []*AudioFile {
	if m != nil {
		return m.Preview
	}
	return nil
}

type Image struct {
	FileId               []byte      `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Size                 *Image_Size `protobuf:"varint,2,opt,name=size,enum=proto.Image_Size" json:"size,omitempty"`
	Width                *int32      `protobuf:"zigzag32,3,opt,name=width" json:"width,omitempty"`
	Height               *int32      `protobuf:"zigzag32,4,opt,name=height" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{7}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetFileId() []byte {
	if m != nil {
		return m.FileId
	}
	return nil
}

func (m *Image) GetSize() Image_Size {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return Image_DEFAULT
}

func (m *Image) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *Image) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

type ImageGroup struct {
	Image                []*Image `protobuf:"bytes,1,rep,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageGroup) Reset()         { *m = ImageGroup{} }
func (m *ImageGroup) String() string { return proto.CompactTextString(m) }
func (*ImageGroup) ProtoMessage()    {}
func (*ImageGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{8}
}

func (m *ImageGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageGroup.Unmarshal(m, b)
}
func (m *ImageGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageGroup.Marshal(b, m, deterministic)
}
func (m *ImageGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGroup.Merge(m, src)
}
func (m *ImageGroup) XXX_Size() int {
	return xxx_messageInfo_ImageGroup.Size(m)
}
func (m *ImageGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGroup proto.InternalMessageInfo

func (m *ImageGroup) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type Biography struct {
	Text                 *string       `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Portrait             []*Image      `protobuf:"bytes,2,rep,name=portrait" json:"portrait,omitempty"`
	PortraitGroup        []*ImageGroup `protobuf:"bytes,3,rep,name=portrait_group,json=portraitGroup" json:"portrait_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Biography) Reset()         { *m = Biography{} }
func (m *Biography) String() string { return proto.CompactTextString(m) }
func (*Biography) ProtoMessage()    {}
func (*Biography) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{9}
}

func (m *Biography) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Biography.Unmarshal(m, b)
}
func (m *Biography) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Biography.Marshal(b, m, deterministic)
}
func (m *Biography) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Biography.Merge(m, src)
}
func (m *Biography) XXX_Size() int {
	return xxx_messageInfo_Biography.Size(m)
}
func (m *Biography) XXX_DiscardUnknown() {
	xxx_messageInfo_Biography.DiscardUnknown(m)
}

var xxx_messageInfo_Biography proto.InternalMessageInfo

func (m *Biography) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Biography) GetPortrait() []*Image {
	if m != nil {
		return m.Portrait
	}
	return nil
}

func (m *Biography) GetPortraitGroup() []*ImageGroup {
	if m != nil {
		return m.PortraitGroup
	}
	return nil
}

type Disc struct {
	Number               *int32   `protobuf:"zigzag32,1,opt,name=number" json:"number,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Track                []*Track `protobuf:"bytes,3,rep,name=track" json:"track,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Disc) Reset()         { *m = Disc{} }
func (m *Disc) String() string { return proto.CompactTextString(m) }
func (*Disc) ProtoMessage()    {}
func (*Disc) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{10}
}

func (m *Disc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Disc.Unmarshal(m, b)
}
func (m *Disc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Disc.Marshal(b, m, deterministic)
}
func (m *Disc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disc.Merge(m, src)
}
func (m *Disc) XXX_Size() int {
	return xxx_messageInfo_Disc.Size(m)
}
func (m *Disc) XXX_DiscardUnknown() {
	xxx_messageInfo_Disc.DiscardUnknown(m)
}

var xxx_messageInfo_Disc proto.InternalMessageInfo

func (m *Disc) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Disc) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Disc) GetTrack() []*Track {
	if m != nil {
		return m.Track
	}
	return nil
}

type Copyright struct {
	Typ                  *Copyright_Type `protobuf:"varint,1,opt,name=typ,enum=proto.Copyright_Type" json:"typ,omitempty"`
	Text                 *string         `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Copyright) Reset()         { *m = Copyright{} }
func (m *Copyright) String() string { return proto.CompactTextString(m) }
func (*Copyright) ProtoMessage()    {}
func (*Copyright) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{11}
}

func (m *Copyright) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Copyright.Unmarshal(m, b)
}
func (m *Copyright) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Copyright.Marshal(b, m, deterministic)
}
func (m *Copyright) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Copyright.Merge(m, src)
}
func (m *Copyright) XXX_Size() int {
	return xxx_messageInfo_Copyright.Size(m)
}
func (m *Copyright) XXX_DiscardUnknown() {
	xxx_messageInfo_Copyright.DiscardUnknown(m)
}

var xxx_messageInfo_Copyright proto.InternalMessageInfo

func (m *Copyright) GetTyp() Copyright_Type {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return Copyright_P
}

func (m *Copyright) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type Restriction struct {
	CountriesAllowed     *string           `protobuf:"bytes,2,opt,name=countries_allowed,json=countriesAllowed" json:"countries_allowed,omitempty"`
	CountriesForbidden   *string           `protobuf:"bytes,3,opt,name=countries_forbidden,json=countriesForbidden" json:"countries_forbidden,omitempty"`
	Typ                  *Restriction_Type `protobuf:"varint,4,opt,name=typ,enum=proto.Restriction_Type" json:"typ,omitempty"`
	CatalogueStr         []string          `protobuf:"bytes,5,rep,name=catalogue_str,json=catalogueStr" json:"catalogue_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Restriction) Reset()         { *m = Restriction{} }
func (m *Restriction) String() string { return proto.CompactTextString(m) }
func (*Restriction) ProtoMessage()    {}
func (*Restriction) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{12}
}

func (m *Restriction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Restriction.Unmarshal(m, b)
}
func (m *Restriction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Restriction.Marshal(b, m, deterministic)
}
func (m *Restriction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restriction.Merge(m, src)
}
func (m *Restriction) XXX_Size() int {
	return xxx_messageInfo_Restriction.Size(m)
}
func (m *Restriction) XXX_DiscardUnknown() {
	xxx_messageInfo_Restriction.DiscardUnknown(m)
}

var xxx_messageInfo_Restriction proto.InternalMessageInfo

func (m *Restriction) GetCountriesAllowed() string {
	if m != nil && m.CountriesAllowed != nil {
		return *m.CountriesAllowed
	}
	return ""
}

func (m *Restriction) GetCountriesForbidden() string {
	if m != nil && m.CountriesForbidden != nil {
		return *m.CountriesForbidden
	}
	return ""
}

func (m *Restriction) GetTyp() Restriction_Type {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return Restriction_STREAMING
}

func (m *Restriction) GetCatalogueStr() []string {
	if m != nil {
		return m.CatalogueStr
	}
	return nil
}

type SalePeriod struct {
	Restriction          []*Restriction `protobuf:"bytes,1,rep,name=restriction" json:"restriction,omitempty"`
	Start                *Date          `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End                  *Date          `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SalePeriod) Reset()         { *m = SalePeriod{} }
func (m *SalePeriod) String() string { return proto.CompactTextString(m) }
func (*SalePeriod) ProtoMessage()    {}
func (*SalePeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{13}
}

func (m *SalePeriod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SalePeriod.Unmarshal(m, b)
}
func (m *SalePeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SalePeriod.Marshal(b, m, deterministic)
}
func (m *SalePeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalePeriod.Merge(m, src)
}
func (m *SalePeriod) XXX_Size() int {
	return xxx_messageInfo_SalePeriod.Size(m)
}
func (m *SalePeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_SalePeriod.DiscardUnknown(m)
}

var xxx_messageInfo_SalePeriod proto.InternalMessageInfo

func (m *SalePeriod) GetRestriction() []*Restriction {
	if m != nil {
		return m.Restriction
	}
	return nil
}

func (m *SalePeriod) GetStart() *Date {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *SalePeriod) GetEnd() *Date {
	if m != nil {
		return m.End
	}
	return nil
}

type ExternalId struct {
	Typ                  *string  `protobuf:"bytes,1,opt,name=typ" json:"typ,omitempty"`
	Id                   *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalId) Reset()         { *m = ExternalId{} }
func (m *ExternalId) String() string { return proto.CompactTextString(m) }
func (*ExternalId) ProtoMessage()    {}
func (*ExternalId) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{14}
}

func (m *ExternalId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalId.Unmarshal(m, b)
}
func (m *ExternalId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalId.Marshal(b, m, deterministic)
}
func (m *ExternalId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalId.Merge(m, src)
}
func (m *ExternalId) XXX_Size() int {
	return xxx_messageInfo_ExternalId.Size(m)
}
func (m *ExternalId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalId.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalId proto.InternalMessageInfo

func (m *ExternalId) GetTyp() string {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return ""
}

func (m *ExternalId) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type AudioFile struct {
	FileId               []byte            `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Format               *AudioFile_Format `protobuf:"varint,2,opt,name=format,enum=proto.AudioFile_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AudioFile) Reset()         { *m = AudioFile{} }
func (m *AudioFile) String() string { return proto.CompactTextString(m) }
func (*AudioFile) ProtoMessage()    {}
func (*AudioFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{15}
}

func (m *AudioFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AudioFile.Unmarshal(m, b)
}
func (m *AudioFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AudioFile.Marshal(b, m, deterministic)
}
func (m *AudioFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioFile.Merge(m, src)
}
func (m *AudioFile) XXX_Size() int {
	return xxx_messageInfo_AudioFile.Size(m)
}
func (m *AudioFile) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioFile.DiscardUnknown(m)
}

var xxx_messageInfo_AudioFile proto.InternalMessageInfo

func (m *AudioFile) GetFileId() []byte {
	if m != nil {
		return m.FileId
	}
	return nil
}

func (m *AudioFile) GetFormat() AudioFile_Format {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return AudioFile_OGG_VORBIS_96
}

func init() {
	proto.RegisterEnum("proto.Album_Type", Album_Type_name, Album_Type_value)
	proto.RegisterEnum("proto.Image_Size", Image_Size_name, Image_Size_value)
	proto.RegisterEnum("proto.Copyright_Type", Copyright_Type_name, Copyright_Type_value)
	proto.RegisterEnum("proto.Restriction_Type", Restriction_Type_name, Restriction_Type_value)
	proto.RegisterEnum("proto.AudioFile_Format", AudioFile_Format_name, AudioFile_Format_value)
	proto.RegisterType((*TopTracks)(nil), "proto.TopTracks")
	proto.RegisterType((*ActivityPeriod)(nil), "proto.ActivityPeriod")
	proto.RegisterType((*Artist)(nil), "proto.Artist")
	proto.RegisterType((*AlbumGroup)(nil), "proto.AlbumGroup")
	proto.RegisterType((*Date)(nil), "proto.Date")
	proto.RegisterType((*Album)(nil), "proto.Album")
	proto.RegisterType((*Track)(nil), "proto.Track")
	proto.RegisterType((*Image)(nil), "proto.Image")
	proto.RegisterType((*ImageGroup)(nil), "proto.ImageGroup")
	proto.RegisterType((*Biography)(nil), "proto.Biography")
	proto.RegisterType((*Disc)(nil), "proto.Disc")
	proto.RegisterType((*Copyright)(nil), "proto.Copyright")
	proto.RegisterType((*Restriction)(nil), "proto.Restriction")
	proto.RegisterType((*SalePeriod)(nil), "proto.SalePeriod")
	proto.RegisterType((*ExternalId)(nil), "proto.ExternalId")
	proto.RegisterType((*AudioFile)(nil), "proto.AudioFile")
}

func init() { proto.RegisterFile("metadata.proto", fileDescriptor_56d9f74966f40d04) }

var fileDescriptor_56d9f74966f40d04 = []byte{
	// 1420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x36, 0x25, 0x8a, 0x12, 0x47, 0xb6, 0x4c, 0xef, 0x49, 0x62, 0x9e, 0x00, 0x39, 0xf1, 0x61,
	0x4e, 0x4e, 0xdc, 0x16, 0x55, 0x52, 0x27, 0x36, 0x1a, 0x14, 0x08, 0x20, 0x3b, 0xb6, 0x2b, 0xc0,
	0x7f, 0x58, 0x2b, 0x41, 0x7b, 0x53, 0x62, 0x2d, 0x6e, 0xe4, 0x45, 0x29, 0x91, 0x58, 0xae, 0x9c,
	0x28, 0xb7, 0xed, 0x43, 0xf4, 0x05, 0x7a, 0x11, 0xa0, 0x2f, 0xd3, 0x3e, 0x51, 0xb1, 0x3f, 0xa4,
	0x44, 0x39, 0x4a, 0x8d, 0x5c, 0x69, 0x66, 0xbf, 0x99, 0x15, 0x67, 0xf6, 0xfb, 0x66, 0x17, 0x5a,
	0x43, 0x2a, 0x48, 0x44, 0x04, 0x69, 0xa7, 0x3c, 0x11, 0x09, 0xaa, 0xa9, 0x9f, 0xa0, 0x0b, 0x6e,
	0x2f, 0x49, 0x7b, 0x9c, 0xf4, 0x7f, 0xce, 0x90, 0x0f, 0xf5, 0x7e, 0x32, 0x1e, 0x09, 0x3e, 0xf1,
	0xad, 0x0d, 0x6b, 0xd3, 0xc5, 0xb9, 0x8b, 0x02, 0xa8, 0x09, 0x19, 0xe3, 0x57, 0x36, 0xaa, 0x9b,
	0xcd, 0xad, 0x65, 0xbd, 0x49, 0x5b, 0xe5, 0x61, 0x0d, 0x05, 0x17, 0xd0, 0xea, 0xf4, 0x05, 0xbb,
	0x62, 0x62, 0x72, 0x46, 0x39, 0x4b, 0x22, 0x74, 0x0f, 0x20, 0x13, 0x84, 0x8b, 0x70, 0x42, 0x09,
	0x57, 0x5b, 0xae, 0x61, 0x57, 0xad, 0xfc, 0x48, 0x09, 0x47, 0xff, 0x86, 0x06, 0x1d, 0x45, 0x1a,
	0xac, 0x28, 0xb0, 0x4e, 0x47, 0x91, 0x82, 0xee, 0x80, 0x13, 0xd1, 0x3e, 0x89, 0xa8, 0x5f, 0x55,
	0x80, 0xf1, 0x82, 0xdf, 0x1c, 0x70, 0x3a, 0x5c, 0xb0, 0x4c, 0x20, 0x0f, 0xaa, 0x03, 0x16, 0xa9,
	0x5d, 0x97, 0xb1, 0x34, 0x11, 0x02, 0x7b, 0x44, 0x86, 0x54, 0xed, 0xe5, 0x62, 0x65, 0xa3, 0xff,
	0x00, 0xa4, 0x49, 0x3a, 0x8e, 0x09, 0x67, 0x62, 0x62, 0x36, 0x9b, 0x59, 0x41, 0x5f, 0x83, 0x2b,
	0x92, 0x34, 0xd4, 0xc5, 0xd9, 0xaa, 0x38, 0x2f, 0x2f, 0x2e, 0xef, 0x0b, 0x6e, 0x08, 0x63, 0xa2,
	0x2d, 0x68, 0x92, 0xf8, 0x62, 0x3c, 0x0c, 0x07, 0x3c, 0x19, 0xa7, 0x7e, 0x4d, 0x25, 0xac, 0x99,
	0x84, 0x8e, 0x44, 0x0e, 0x25, 0x80, 0x81, 0x14, 0x36, 0x7a, 0x06, 0xcb, 0x19, 0x1b, 0x0d, 0x62,
	0x6a, 0x92, 0x9c, 0x45, 0x49, 0x4d, 0x1d, 0xa6, 0xb3, 0x5e, 0xc0, 0x5a, 0x3f, 0x19, 0xa6, 0x2c,
	0x26, 0x82, 0x25, 0x23, 0x93, 0x5a, 0x5f, 0x94, 0xea, 0xcd, 0xc4, 0xea, 0xfc, 0xef, 0xc0, 0x23,
	0x69, 0x4a, 0x09, 0xcf, 0xc2, 0x22, 0xbd, 0xb1, 0x28, 0xbd, 0x65, 0x42, 0x4f, 0x4d, 0xf2, 0x2d,
	0xa8, 0x0d, 0xe8, 0x88, 0x53, 0xdf, 0xdd, 0xa8, 0x6e, 0xba, 0x58, 0x3b, 0xb2, 0x78, 0xfa, 0x4e,
	0x50, 0x3e, 0x22, 0x71, 0xc8, 0x22, 0x1f, 0x4a, 0xbb, 0xed, 0x1b, 0xa4, 0x1b, 0x61, 0xa0, 0x85,
	0x8d, 0x36, 0xa1, 0x91, 0x26, 0x5c, 0x70, 0xc2, 0x84, 0xdf, 0x2c, 0x71, 0xa7, 0x3b, 0x24, 0x03,
	0x8a, 0x0b, 0x14, 0xb5, 0xc1, 0xbd, 0x60, 0xc9, 0x80, 0x93, 0xf4, 0x72, 0xe2, 0x2f, 0x97, 0x4e,
	0x62, 0x37, 0x5f, 0xc7, 0xd3, 0x10, 0xf4, 0x02, 0x56, 0x89, 0xa1, 0x5b, 0x98, 0x2a, 0xbe, 0xf9,
	0x2b, 0x2a, 0xeb, 0x76, 0x5e, 0x5f, 0x89, 0x8c, 0xb8, 0x45, 0xca, 0xe4, 0x7c, 0x06, 0x4d, 0x4e,
	0x33, 0xc1, 0x59, 0x5f, 0x36, 0xcd, 0x6f, 0xa9, 0x5c, 0x64, 0x72, 0xf1, 0x14, 0xc1, 0xb3, 0x61,
	0xe8, 0x11, 0xd4, 0x39, 0x8d, 0x89, 0xa0, 0x91, 0xbf, 0xaa, 0x32, 0x56, 0xf2, 0x7f, 0x53, 0xac,
	0xc4, 0x39, 0x8a, 0xb6, 0x61, 0x9d, 0x65, 0x61, 0x5e, 0x5d, 0xa8, 0x59, 0xd3, 0x4f, 0xae, 0x28,
	0xf7, 0xbd, 0x0d, 0x6b, 0xb3, 0x81, 0x6f, 0xb1, 0xec, 0xcc, 0xa0, 0xea, 0x24, 0xf6, 0x24, 0x86,
	0xbe, 0x85, 0x56, 0x91, 0xa3, 0x0f, 0x6d, 0x6d, 0xc3, 0x9a, 0x69, 0xb3, 0xea, 0x9a, 0x3e, 0xb4,
	0x95, 0x3c, 0x50, 0xb9, 0xc1, 0x13, 0x80, 0xe9, 0x89, 0x4a, 0xc1, 0xaa, 0xbf, 0xf4, 0xad, 0x52,
	0xd3, 0x55, 0x04, 0xd6, 0x50, 0xb0, 0x0b, 0xf6, 0x4b, 0x22, 0xa8, 0xd4, 0xcd, 0x8c, 0x40, 0x95,
	0x2d, 0x19, 0x30, 0x4c, 0x46, 0xe2, 0xd2, 0x08, 0x53, 0x3b, 0x52, 0x73, 0x11, 0xc9, 0x65, 0x24,
	0xcd, 0xe0, 0xf7, 0x1a, 0xd4, 0xd4, 0xa6, 0x37, 0xd4, 0xe3, 0x43, 0x70, 0x88, 0xea, 0x94, 0x5f,
	0xfd, 0x58, 0xfb, 0x0c, 0x88, 0x1e, 0x40, 0x55, 0x4c, 0x52, 0xdf, 0xde, 0xb0, 0x36, 0x5b, 0x65,
	0xc2, 0xb6, 0x7b, 0x93, 0x94, 0x62, 0x89, 0xca, 0x6f, 0x8c, 0xc9, 0x05, 0x8d, 0xfd, 0x9a, 0xfa,
	0x03, 0xed, 0xa0, 0xfb, 0x60, 0x47, 0x44, 0x50, 0xdf, 0x51, 0x7d, 0x6b, 0x9a, 0x5c, 0x59, 0x28,
	0x56, 0xc0, 0xdc, 0x48, 0xa8, 0x5f, 0x1b, 0x09, 0x05, 0xf9, 0x1b, 0xb3, 0xe4, 0x0f, 0xa0, 0xa6,
	0x4f, 0xcf, 0xfd, 0x08, 0x8b, 0x35, 0xf4, 0x59, 0x02, 0x91, 0x9f, 0xcb, 0xb2, 0xbe, 0x11, 0x47,
	0xf1, 0xb9, 0x2c, 0xeb, 0x63, 0x05, 0xc8, 0x51, 0xc8, 0xe9, 0x15, 0xa3, 0x6f, 0x95, 0x28, 0x5c,
	0x6c, 0x3c, 0xa9, 0x97, 0x7e, 0x92, 0x4e, 0x38, 0x1b, 0x5c, 0x0a, 0xc3, 0xfc, 0x5c, 0x2f, 0x7b,
	0xf9, 0x3a, 0x9e, 0x86, 0x7c, 0x26, 0xdf, 0xff, 0x3f, 0xcf, 0xf7, 0x32, 0x93, 0x0a, 0xba, 0x6f,
	0x41, 0x33, 0x23, 0x31, 0xcd, 0x95, 0xe8, 0x95, 0x4a, 0x3f, 0x27, 0x31, 0x35, 0x2a, 0x84, 0xac,
	0xb0, 0x65, 0x8e, 0xea, 0xdb, 0x3f, 0x11, 0x1d, 0x54, 0x94, 0x66, 0xf9, 0x0e, 0xd8, 0x92, 0x00,
	0xc8, 0x85, 0x5a, 0xe7, 0x68, 0xf7, 0xd5, 0xb1, 0x67, 0x21, 0x00, 0xe7, 0xbc, 0x7b, 0x72, 0x78,
	0xb4, 0xef, 0x55, 0xd0, 0x2a, 0x34, 0xf7, 0x4e, 0x8f, 0xcf, 0xba, 0x47, 0x9d, 0x5e, 0xf7, 0xf4,
	0xc4, 0xab, 0x22, 0x07, 0x2a, 0xfb, 0x67, 0x9e, 0x1d, 0x7c, 0xb0, 0xa1, 0xa6, 0x47, 0xf8, 0xcd,
	0x78, 0x5a, 0xe8, 0xa7, 0xaa, 0xbe, 0xea, 0x63, 0xfa, 0x99, 0xe1, 0xb2, 0xfd, 0x29, 0x2e, 0xdf,
	0x01, 0x67, 0x34, 0x1e, 0x5e, 0x50, 0xae, 0x78, 0xba, 0x86, 0x8d, 0x87, 0xee, 0x43, 0x53, 0x1e,
	0x70, 0x68, 0x40, 0x47, 0x13, 0x51, 0x2e, 0x9d, 0xe8, 0x80, 0xbb, 0xd0, 0x88, 0xc6, 0x5c, 0xcd,
	0x74, 0x43, 0xd3, 0xc2, 0x9f, 0x23, 0x71, 0xe3, 0x1a, 0x89, 0xef, 0x42, 0x83, 0xbe, 0x4b, 0x63,
	0xd6, 0x67, 0xc2, 0x77, 0xd5, 0xbc, 0x29, 0xfc, 0xcf, 0xa2, 0xe9, 0x1c, 0x7b, 0x9a, 0x37, 0x63,
	0xcf, 0xff, 0xc0, 0x7e, 0xc3, 0x62, 0x3a, 0x37, 0xce, 0x3b, 0xe3, 0x88, 0x25, 0x07, 0x2c, 0xa6,
	0x58, 0xa1, 0xa8, 0x2d, 0x2f, 0x55, 0xf5, 0x4f, 0x82, 0x5d, 0x51, 0xc3, 0xe5, 0xf2, 0x13, 0x63,
	0x36, 0x60, 0x9e, 0x6b, 0xad, 0x9b, 0x70, 0xed, 0x4b, 0xa8, 0xa7, 0x46, 0x46, 0xab, 0x0b, 0x3e,
	0x26, 0x0f, 0x08, 0xfe, 0xb0, 0xa0, 0xa6, 0xe8, 0x87, 0xd6, 0xa1, 0x2e, 0xbf, 0x30, 0x2c, 0xf8,
	0xe2, 0x48, 0xb7, 0x1b, 0xa1, 0x87, 0x60, 0x67, 0xec, 0xbd, 0xa6, 0x4c, 0xab, 0xcc, 0xd9, 0xf6,
	0x39, 0x7b, 0x4f, 0xb1, 0x82, 0xe5, 0x28, 0x79, 0xcb, 0x22, 0x71, 0x69, 0x26, 0xa6, 0x76, 0x24,
	0x21, 0x2e, 0xa9, 0x92, 0xad, 0xad, 0x09, 0xa1, 0xbd, 0x60, 0x1b, 0x6c, 0x99, 0x8b, 0x9a, 0x50,
	0x7f, 0xb9, 0x7f, 0xd0, 0x79, 0x75, 0xd4, 0xf3, 0x96, 0x24, 0xd1, 0xcf, 0x8f, 0x3b, 0x47, 0x47,
	0x9e, 0x25, 0xcd, 0xa3, 0x0e, 0x3e, 0x94, 0x3c, 0x07, 0x70, 0x7e, 0xd0, 0x76, 0x55, 0x0e, 0xfe,
	0xa9, 0x58, 0x24, 0x71, 0x99, 0xf4, 0xe6, 0x06, 0xbf, 0x99, 0x53, 0x0a, 0x0a, 0x7e, 0xb1, 0xc0,
	0x2d, 0xee, 0x54, 0x49, 0x7f, 0x41, 0xdf, 0x09, 0xf3, 0xe4, 0x53, 0x76, 0xe9, 0xda, 0xae, 0x7c,
	0xf2, 0xda, 0xbe, 0x7e, 0x61, 0x55, 0x4b, 0xe7, 0xb1, 0xf8, 0xc2, 0x7a, 0x0d, 0xf6, 0x4b, 0x33,
	0xe0, 0x8c, 0x04, 0xac, 0x92, 0x3e, 0x16, 0xc8, 0x52, 0x3f, 0xd5, 0xaa, 0x8b, 0xdf, 0xa1, 0x3f,
	0x81, 0x5b, 0x0c, 0x40, 0xf4, 0x48, 0x5f, 0x24, 0x96, 0x3a, 0xa7, 0xdb, 0xf3, 0xf3, 0x71, 0xe6,
	0x32, 0xc9, 0xbb, 0x50, 0x99, 0x76, 0x21, 0xb8, 0x65, 0x86, 0x4d, 0x0d, 0xac, 0x33, 0x6f, 0x49,
	0xfe, 0xec, 0x79, 0x56, 0xf0, 0x97, 0x05, 0xcd, 0x19, 0xc6, 0xa3, 0xaf, 0xe4, 0x4b, 0x4d, 0x3e,
	0x93, 0x19, 0xcd, 0x42, 0x12, 0xc7, 0xc9, 0x5b, 0x1a, 0x99, 0x6d, 0xbc, 0x02, 0xe8, 0xe8, 0x75,
	0xf4, 0x18, 0xfe, 0x35, 0x0d, 0x7e, 0x93, 0xf0, 0x0b, 0x16, 0x45, 0x74, 0xa4, 0xf8, 0xe1, 0x62,
	0x54, 0x40, 0x07, 0x39, 0x82, 0xbe, 0x98, 0xbd, 0x09, 0xd7, 0xaf, 0x0b, 0x6e, 0xa6, 0x84, 0x07,
	0xb0, 0xd2, 0x27, 0x82, 0xc4, 0xc9, 0x60, 0x4c, 0xc3, 0x4c, 0x70, 0xf5, 0x3c, 0x75, 0xf1, 0x72,
	0xb1, 0x78, 0x2e, 0x78, 0x70, 0xdb, 0xd4, 0xb4, 0x02, 0xee, 0x79, 0x0f, 0xef, 0x77, 0x8e, 0xbb,
	0x27, 0x87, 0xde, 0x52, 0xf0, 0xab, 0x05, 0x30, 0x95, 0xce, 0xbc, 0xdc, 0xad, 0x9b, 0xc9, 0xfd,
	0xbf, 0x50, 0x53, 0xaf, 0x7b, 0x55, 0xfd, 0xdc, 0xdd, 0xab, 0x11, 0x74, 0x0f, 0xaa, 0x74, 0x14,
	0x99, 0xa9, 0x5a, 0x0a, 0x90, 0xeb, 0x41, 0x1b, 0x60, 0x3a, 0x80, 0xe4, 0xa8, 0xce, 0x0f, 0xcf,
	0xd5, 0x25, 0xb6, 0xa0, 0xc2, 0xf2, 0xe6, 0x56, 0x58, 0x14, 0x7c, 0xa8, 0x80, 0x5b, 0x28, 0x78,
	0xb1, 0x5c, 0x1f, 0x83, 0xf3, 0x26, 0xe1, 0x43, 0x22, 0x8c, 0x60, 0xd7, 0xe7, 0xc5, 0xdf, 0x3e,
	0x50, 0x30, 0x36, 0x61, 0xc1, 0x9f, 0x16, 0x38, 0x7a, 0x09, 0xad, 0xc1, 0xca, 0xe9, 0xe1, 0x61,
	0xf8, 0xfa, 0x14, 0xef, 0x76, 0xcf, 0xc3, 0xe7, 0x3b, 0xde, 0x12, 0x42, 0xd0, 0x9a, 0x59, 0xfa,
	0x66, 0xe7, 0x89, 0x67, 0xcd, 0xad, 0x3d, 0xdd, 0x7a, 0xe2, 0x55, 0xa4, 0x90, 0x8f, 0xcf, 0x9e,
	0x86, 0x5b, 0xdb, 0x3b, 0x5e, 0x35, 0x77, 0x24, 0x62, 0xe7, 0x8e, 0x4c, 0xad, 0x49, 0x31, 0x4b,
	0xe7, 0xf9, 0x8e, 0xe7, 0xc8, 0x0b, 0xcc, 0x00, 0xe1, 0xfe, 0xc9, 0x9e, 0x57, 0x97, 0xe0, 0x69,
	0xef, 0xfb, 0x7d, 0xbc, 0xe5, 0x35, 0x0a, 0xfb, 0xa9, 0xe7, 0xca, 0x1d, 0x3a, 0x9d, 0x3d, 0xb5,
	0x03, 0xe4, 0x8e, 0xdc, 0xbb, 0x59, 0x44, 0x3d, 0xf3, 0x96, 0x0b, 0x7b, 0xdb, 0x5b, 0xf9, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x75, 0x9a, 0xc2, 0x52, 0x02, 0x0e, 0x00, 0x00,
}
